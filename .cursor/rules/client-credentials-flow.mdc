---
description: 
globs: 
alwaysApply: true
---
# Client Credentials Flow Implementation

Standards for implementing client credentials OAuth 2.0 flow in a Next.js application connecting to a Java backend.

<rule>
name: client_credentials_flow
description: Standards for implementing client credentials OAuth 2.0 flow in Next.js
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx)$"
  - type: file_path
    pattern: "src/(lib|hooks|actions)/.*"
  - type: intent
    pattern: "oauth_implementation|client_credentials"

actions:
  - type: suggest
    message: |
      ## Client Credentials Flow Implementation

      The client credentials grant type is used when the application acts on its own behalf to access resources, rather than on behalf of a user.

      ### Environment Variables

      Store client credentials securely in environment variables:

      ```env
      # .env.local (never commit this file)
      NEXT_PUBLIC_API_URL=http://localhost:8080
      CLIENT_ID=restaurant_app
      CLIENT_SECRET=your_client_secret
      ```

      For server-side authentication, use regular environment variables (not NEXT_PUBLIC):

      ```env
      # .env.local
      API_URL=http://localhost:8080
      CLIENT_ID=restaurant_app
      CLIENT_SECRET=your_client_secret
      ```

      ### Server-Side Authentication Implementation

      For server components and server actions, implement authentication on the server:

      ```typescript
      // src/lib/auth-server.ts
      import { cookies } from 'next/headers';

      const API_URL = process.env.API_URL || 'http://localhost:8080';
      const CLIENT_ID = process.env.CLIENT_ID;
      const CLIENT_SECRET = process.env.CLIENT_SECRET;

      /**
       * Authenticate with client credentials flow (server-side)
       */
      export async function authenticateServer(): Promise<boolean> {
        if (!CLIENT_ID || !CLIENT_SECRET) {
          console.error('Client credentials not configured');
          return false;
        }

        try {
          const authString = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64');
          
          const response = await fetch(`${API_URL}/oauth2/token`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'Authorization': `Basic ${authString}`,
            },
            body: new URLSearchParams({
              'grant_type': 'client_credentials',
              'scope': 'api',
            }),
            cache: 'no-store',
          });

          if (!response.ok) {
            console.error('Authentication failed:', await response.text());
            return false;
          }

          // The Java backend sets HTTP-only cookies
          // For server components, we need to forward those cookies
          const cookieStore = cookies();
          response.headers.getSetCookie().forEach(cookie => {
            // Parse the cookie to get name, value, and options
            const [cookieName, cookieValue] = cookie.split('=');
            cookieStore.set(cookieName, cookieValue);
          });

          return true;
        } catch (error) {
          console.error('Authentication error:', error);
          return false;
        }
      }

      /**
       * Make an authenticated API request (server-side)
       */
      export async function fetchWithAuth<T>(
        endpoint: string, 
        options: RequestInit = {}
      ): Promise<T> {
        const url = `${API_URL}${endpoint}`;
        
        // Try the request with existing cookies
        let response = await fetch(url, {
          ...options,
          headers: {
            ...options.headers,
            'Content-Type': 'application/json',
          },
          cache: 'no-store',
          // Forward the cookies from the incoming request to the API
          credentials: 'include',
        });

        // If unauthorized, try to authenticate and retry the request
        if (response.status === 401) {
          const authenticated = await authenticateServer();
          
          if (!authenticated) {
            throw new Error('Authentication failed');
          }
          
          // Retry the request with new authentication
          response = await fetch(url, {
            ...options,
            headers: {
              ...options.headers,
              'Content-Type': 'application/json',
            },
            cache: 'no-store',
            credentials: 'include',
          });
        }

        if (!response.ok) {
          throw new Error(`API error: ${response.status}`);
        }

        return response.json();
      }
      ```

      ### Client-Side Authentication (Route Handlers)

      For API routes and route handlers, implement authentication:

      ```typescript
      // src/app/api/auth/route.ts
      import { NextRequest, NextResponse } from 'next/server';

      const API_URL = process.env.API_URL || 'http://localhost:8080';
      const CLIENT_ID = process.env.CLIENT_ID;
      const CLIENT_SECRET = process.env.CLIENT_SECRET;

      export async function POST(request: NextRequest) {
        if (!CLIENT_ID || !CLIENT_SECRET) {
          return NextResponse.json(
            { error: 'Server configuration error' },
            { status: 500 }
          );
        }

        try {
          const authString = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64');
          
          const response = await fetch(`${API_URL}/oauth2/token`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'Authorization': `Basic ${authString}`,
            },
            body: new URLSearchParams({
              'grant_type': 'client_credentials',
              'scope': 'api',
            }),
          });

          if (!response.ok) {
            return NextResponse.json(
              { error: 'Authentication failed' },
              { status: response.status }
            );
          }

          // Forward the response with cookies to the client
          const data = await response.json();
          
          // Create a new response with the data
          const nextResponse = NextResponse.json(data, { status: 200 });
          
          // Forward the cookies from the authorization server
          response.headers.getSetCookie().forEach(cookie => {
            nextResponse.headers.append('Set-Cookie', cookie);
          });
          
          return nextResponse;
        } catch (error) {
          console.error('Authentication error:', error);
          return NextResponse.json(
            { error: 'Authentication service unavailable' },
            { status: 503 }
          );
        }
      }
      ```

      ### Server Actions Implementation

      For server actions, use the server-side authentication:

      ```typescript
      // src/actions/menu.ts
      'use server'

      import { fetchWithAuth, authenticateServer } from '@/lib/auth-server';
      import { revalidatePath } from 'next/cache';

      export async function getMenuItems() {
        try {
          // This will automatically authenticate if needed
          const data = await fetchWithAuth<{ items: MenuItem[] }>('/api/menu');
          return data.items;
        } catch (error) {
          console.error('Failed to fetch menu items:', error);
          return [];
        }
      }

      export async function createMenuItem(formData: FormData) {
        try {
          // Ensure we're authenticated
          await authenticateServer();
          
          const name = formData.get('name') as string;
          const price = parseFloat(formData.get('price') as string);
          const description = formData.get('description') as string;
          
          const response = await fetchWithAuth('/api/menu', {
            method: 'POST',
            body: JSON.stringify({ name, price, description }),
          });
          
          revalidatePath('/menu');
          return { success: true, data: response };
        } catch (error) {
          console.error('Failed to create menu item:', error);
          return { success: false, error: error.message };
        }
      }
      ```

      ### Client-Side API Hooks

      ```typescript
      // src/hooks/use-menu-items.ts
      'use client'

      import { useQuery } from '@tanstack/react-query';

      export function useMenuItems() {
        return useQuery({
          queryKey: ['menu-items'],
          queryFn: async () => {
            // Client-side requests should include credentials to send cookies
            const response = await fetch('/api/menu', {
              credentials: 'include',
            });
            
            if (!response.ok) {
              if (response.status === 401) {
                // If unauthorized, redirect to authenticate
                window.location.href = '/api/auth';
              }
              throw new Error('Failed to fetch menu items');
            }
            
            return response.json();
          },
        });
      }
      ```

  - type: reject
    conditions:
      - pattern: "\\bclient_credentials\\b(?!.*credentials\\s*:\\s*['\"]include['\"])"
        message: "When using client credentials flow, always include 'credentials: 'include'' in fetch calls to ensure cookies are sent with requests."
      
      - pattern: "(?i)\\bBase64\\.encode\\b"
        message: "Use Buffer.from().toString('base64') for encoding credentials in Node.js."
      
      - pattern: "(?i)\\blocalStorage\\.setItem\\(['\"]token['\"]"
        message: "Don't store tokens in localStorage. Use HTTP-only cookies provided by the backend."

examples:
  - input: |
      // src/lib/api.ts
      export async function authenticate() {
        const response = await fetch(`${API_URL}/oauth2/token`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`,
          },
          body: new URLSearchParams({
            'grant_type': 'client_credentials',
            'scope': 'api',
          }),
        });
        
        const data = await response.json();
        localStorage.setItem('token', data.access_token);
      }
    output: |
      // src/lib/api.ts
      export async function authenticate() {
        const response = await fetch(`${API_URL}/oauth2/token`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64')}`,
          },
          body: new URLSearchParams({
            'grant_type': 'client_credentials',
            'scope': 'api',
          }),
          credentials: 'include',
        });
        
        // No need to extract token - backend sets HTTP-only cookies
        return response.ok;
      }

metadata:
  priority: high
  version: 1.0
</rule>
